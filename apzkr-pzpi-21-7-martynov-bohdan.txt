 Пояснювальна записка до курсової роботи: 49 с., 20 рис., 2 табл., 1 додаток, 10 джерел. СИСТЕМА ІДЕНТИФІКАЦІЇ ОДЯГУ, МОБІЛЬНИЙ ДОДАТОК, ARDUINO, РОЗМІРИ, РЕКОМЕНДАЦІЇ, ІНТЕГРАЦІЯ.
 Об’єктом дослідження є процес ідентифікації клієнтів та вибору одягу на основі індивідуальних параметрів та уподобань. У сучасному світі вибір одягу вимагає значних зусиль та часу від покупців, які прагнуть знайти ідеальний варіант для себе. Процес включає в себе відвідування численних магазинів, приміряння великої кількості речей у пошуках того, що ідеально підійде. Це може стати викликом, особливо коли потрібний товар виявляється недоступним.
 Метою курсової роботи є розробка системи, яка зберігає інформацію щодо розмірів та уподобань клієнтів, стилів одягу, та на основі профілів користувачів підбирає відповідні варіанти одягу з можливістю сканування RFID-міток для автоматичної ідентифікації розмірів та інтеграції з мобільним додатком для зручності користувачів. Така система має забезпечувати зручний інтерфейс для швидкого пошуку та вибору одягу відповідно до заданих параметрів, що дозволяє користувачам з легкістю знаходити ідеальні варіанти.
 Методи розробки базуються на технології Java для мобільного додатку, PHP для веб-інтерфейсу адміністрування, MySQL для бази даних, та Arduino IDE для розробки IoT-пристрою. Для реалізації було створено наступні таблиці: client (дані про клієнтів), client_profile (профілі клієнтів), clothing_items (дані про одяг) та users (дані про користувачів).
 У результаті роботи здійснено програмну реалізацію системи для ідентифікації розмірів одягу клієнтів. Програмна система складається з веб­додатку, сервера, мобільного додатку та смарт-пристрою.

  1. БІЗНЕС-ВИМОГИ 
  1.1. Передумови

У сучасному світі вибір одягу вимагає значних зусиль та часу від покупців, які прагнуть знайти ідеальний варіант для себе. Процес включає в себе відвідування численних магазинів, приміряння великої кількості речей у пошуках того, що ідеально підійде. Це може стати викликом, особливо коли потрібний товар виявляється недоступним.
У цьому контексті, програмна система, що пропонує персоналізований підбір одягу та спрощує процес покупки, стає ключовою для забезпечення зручності та ефективності шопінгу. Перш за все, клієнти зіштовхуються з проблемою вибору з величезної кількості варіантів, де важливо не тільки врахувати особисті переваги, але й актуальні тренди та вимоги до якості. Система повинна надавати рекомендації, засновані на аналізі індивідуальних переваг користувача та модних тенденцій, забезпечуючи вибір, який відповідає їхнім потребам та стилю.
Крім того, питання комфорту при виборі одягу також є важливим. Клієнтам необхідно легко знаходити та приміряти бажані речі без потреби проводити години в магазинах. Така система має забезпечувати зручний інтерфейс для швидкого пошуку та вибору одягу відповідно до заданих параметрів, що дозволяє користувачам з легкістю знаходити ідеальні варіанти.
Нарешті, персоналізація шопінгу відіграє ключову роль у задоволенні потреб сучасних покупців. Система має надавати індивідуалізовані рекомендації та пропозиції, враховуючи особисті вподобання, розміри та інші критерії вибору, що допомагає покупцям відчувати особистий підхід та забезпечує більш задовільний досвід покупки.
Таким чином, розробка програмної системи для персоналізованого підбору одягу та спрощення процесу покупки є важливою для клієнтів, які шукають зручність, ефективність та персоналізацію під час вибору одягу.

  1. 2. Бізнес-можливості

Аналоги:
-FashionFinder – ця компанія пропонує програмне забезпечення для персоналізованого підбору одягу, що враховує індивідуальні переваги та модні тенденції. Їхня система сприяє зручному та ефективному процесу вибору одягу для користувачів. Однак, програмне забезпечення може бути обмежене у варіативності стилів та можливостях персоналізації.
-TrendMatch – ця компанія спеціалізується на наданні персоналізованих рекомендацій з одягу, заснованих на аналізі поточних модних трендів та індивідуальних переваг користувача. Вони пропонують широкий вибір брендів та стилів. Однак, їхня платформа може мати обмеження у доступності та інтеграції з місцевими продавцями.
-Даний програмний продукт розрахований на ринок моди та продавців одягу. Основний спосіб монетизації – це співпраця з малим та середнім бізнесом у цій сфері, пропонуючи їм інструменти для залучення клієнтів через персоналізовані пропозиції та поліпшення досвіду покупок завдяки технологіям RFID міток.

  1.3. Бізнес-цілі та критерії успіху

- БЦ - 1: Підвищення персоналізації покупки одягу:
  - БЦ - 1.1: Розробити систему, що забезпечує індивідуалізовані рекомендації з вибору одягу на основі розмірів і переваг користувача.
  - БЦ - 1.2: Впровадити інтеграцію з RFID-технологіями для точного визначення розмірів одягу користувачів.
- БЦ - 2: Розширення ринку та аудиторії:
  - БЦ - 2.1: Залучити до системи не менше 1000 активних користувачів у перші шість місяців після запуску.
  - БЦ - 2.2: Співпрацювати з не менше ніж 20 магазинами одягу та брендами для розширення асортименту доступного одягу у системі.
- БЦ - 3: Монетизація системи:
 - БЦ - 3.1: Реалізувати модель монетизації через прямі продажі програмного забезпечення та надання преміальних послуг користувачам.
 - БЦ - 3.2: Розвивати партнерські програми з магазинами одягу та брендами для отримання комісії з продажів, здійснених через систему.
КУ-1: Задоволеність користувачів:
 - КУ - 1.1: Досягти позитивних відгуків від не менше ніж 80% користувачів, які використовують систему для покупки одягу.
 - КУ - 1.2: Забезпечити рівень залученості користувачів, при якому щонайменше 50% зареєстрованих користувачів використовують систему щомісяця.
КУ-2: Ефективність системи та партнерства:
 - КУ - 2.1: Забезпечити стабільність роботи системи з часом відповіді не більше 2 секунд при використанні основних функцій.
 - КУ - 2.2: Укласти партнерські угоди з не менше ніж 20 магазинами та брендами одягу у перші шість місяців після запуску.
КУ-3: Фінансові показники успіху:
 - КУ - 3.1: Досягти позитивного чистого прибутку від діяльності системи у перші 12 місяців після запуску.
 - КУ - 3.2: Забезпечити зростання доходів від монетизації системи не менше ніж на 20% кожного кварталу після другого року експлуатації.

  1.4. Потреби клієнтів або ринку

Індивідуалізовані рекомендації для вибору одягу:
 -Клієнти прагнуть отримати персоналізовані рекомендації, які б враховували їхні індивідуальні розміри, стиль та переваги, забезпечуючи високу вірогідність вибору ідеально відповідного одягу.
 Зручність та швидкість вибору одягу:
 -Клієнти бажають мати доступ до інтуїтивно зрозумілого інтерфейсу та ефективної системи пошуку, яка дозволяла б швидко знайти бажаний одяг, зекономивши час на покупки.
Економія часу та зусиль:
 -Клієнти хочуть мінімізувати час та зусилля, необхідні для пошуку та примірки одягу, завдяки точним рекомендаціям системи, яка враховує їхні індивідуальні параметри.
 Адаптація до різноманітних модних вподобань:
 -Клієнти шукають систему, здатну адаптуватися до їхніх унікальних стилістичних та модних переваг, пропонуючи широкий спектр вибору одягу, який відповідає останнім трендам.
Інтеграція з реальними магазинами та брендами:
 -Клієнти прагнуть, щоб система була інтегрована з магазинами та брендами одягу, забезпечуючи доступ до актуальних колекцій та можливість відразу здійснити покупку вибраного одягу.

  1.5. Бізнес-ризики

Технічні недоліки RFID-системи:
 -Ризик виникнення технічних збоїв або несправностей RFID-міток та сканерів, що може призвести до неможливості ідентифікації користувача або доступу до його інформації про розміри одягу у магазині. Це може підірвати довіру користувачів до системи.
Низька прийнятність ринку:
 -Ризик, що споживачі можуть не бути готовими до використання
 RFID-технологій для особистих покупок через занепокоєння щодо приватності або складнощі у використанні. Низька прийнятність може обмежити успіх продукту на ринку.
 Конкуренція:
 -Ризик зіткнення з конкуренцією від наявних альтернативних рішень або нових гравців на ринку, які можуть пропонувати більш привабливі або інноваційні системи підбору одягу. Це може призвести до зменшення частки ринку.
 Проблеми з приватністю та захистом даних:
 -Ризик витоку персональних даних клієнтів через несанкціонований доступ або технічні недоліки системи. Це може викликати занепокоєння щодо приватності та призвести до юридичних наслідків.
 Залежність від партнерів:
 -Ризик залежності від магазинів та роздрібних партнерів, які мають встановлене обладнання для сканування RFID-міток. Будь-які зміни в їхній політиці або відмова від участі в системі може негативно вплинути на доступність та зручність сервісу для кінцевих користувачів.

  2. КОНЦЕПЦІЯ РІШЕННЯ
  2.1. Окреслення концепції

Цей продукт розроблено з метою революціонізувати досвід покупки одягу, пропонуючи користувачам унікальний та персоналізований підхід. Використовуючи передові технології RFID, наша система дозволяє автоматично ідентифікувати клієнтів у магазинах та надавати інформацію про їх розміри одягу, спрощуючи процес вибору і покупки одягу.
Основні переваги цього продукту полягають у здатності значно поліпшити досвід покупок за рахунок мінімізації часу, який клієнти витрачають на пошук і примірку одягу. Система забезпечує високий рівень персоналізації, пропонуючи користувачам одяг, який ідеально відповідає їх розмірам та перевагам. Це не тільки підвищує задоволеність клієнтів, але й сприяє збільшенню продажів для роздрібних магазинів.
Впровадження системи персоналізованого вибору одягу на основі RFID-технологій створить нові можливості для роздрібних продавців, дозволяючи їм пропонувати особливий шопінг-досвід. Магазини зможуть з легкістю ідентифікувати потреби та переваги своїх клієнтів, підвищуючи їх лояльність та стимулюючи повторні покупки.
Програмна система для персоналізованого вибору одягу стане першопрохідцем на ринку, пропонуючи інноваційне рішення, яке вирішує давні проблеми покупців і продавців одягу. Вона не тільки оптимізує процес вибору та покупки одягу, але й відкриває нові шляхи для розвитку роздрібної торгівлі..

  2.2. Головна функціональність

 MF-1: Реєстрація та авторизація користувачів в мобільному застосунку
 MF-2: Каталог одягу в мобільному застосунку MF-3: Управління обліковим записом користувача
 MF-4: Сканування RFID-міток у магазинах
 MF-5: Додавання та редагування одягу адміністраторами через веб-інтерфейс
 MF-6: Додавання нових клієнтів адміністраторами
 MF-7: Перегляд списку клієнтів
 MF-8: Інтеграція з платіжними системами
 MF-9: Зміна мови інтерфейсу
 MF-10:Техпідтримка користувачів для вирішення технічних питань та надання порад та рекомендацій щодо використання системи
 MF-11: Інтеграція з іншими службами

  2.3. Припущення та залежності

Зал №1: Клієнти, які здійснюють покупки, можуть використовувати мобільний додаток виключно на платформі Android.
Зал №2: Консультанти в магазинах обладнані портативними RFID-сканерами для зчитування міток клієнтів, у яких вони вже є, для визначення їх розмірів одягу та надання відповідних рекомендацій..
Зал №3: Фізичні магазини мають інтернет-з'єднання для синхронізації з центральною базою даних системи для отримання актуальної інформації про користувачів та їх переваги.
При №1: Клієнти надають точні виміри, що дозволяє їм знаходити речі які їм личать.
При №2: Адміністратори регулярно оновлюють інформацію про наявність товарів та їх розміри, забезпечуючи точність рекомендацій, які надаються користувачам через мобільний додаток..
При №3: RFID-мітки, використовувані в системі, характеризуються високою міцністю, призначені для багаторазового використання, мають маленьку вагу, що гарантує легкість у використанні.

  3. РАМКИ ТА ОБМЕЖЕННЯ ПРОЕКТУ
  3.1. Рамки початкового випуску

MF-1: Реєстрація та авторизація користувачів в мобільному застосунку
 Користувачі зможуть створити та керувати своїм профілем у додатку, використовуючи електронну пошту та пароль.
MF-2: Каталог одягу в мобільному застосунку
 Користувачі можуть переглядати актуальний каталог одягу, включаючи нові колекції та доступні розміри.
MF-3: Управління обліковим записом користувача
 Можливість оновлення персональної інформації та переваг, щоб забезпечити актуальність даних для персоналізації пропозицій.
MF-4: Сканування RFID-міток у магазинах
 Функціонал, який дозволяє консультантам швидко ідентифікувати користувачів та їх розміри за допомогою RFID-технологій для надання рекомендацій.
MF-5: Додавання та редагування одягу адміністраторами через веб-інтерфейс
 Інструменти для ефективного управління асортиментом одягу, доступним в системі.
MF-6: Додавання нових клієнтів адміністраторами
 Функція для ручного додавання користувачів адміністраторами через веб-інтерфейс.
MF-7: Перегляд списку клієнтів
 Можливість для адміністраторів переглядати повний список користувачів та їх персональну інформацію.
MF-9: Зміна мови інтерфейсу
 Опція для користувачів вибирати між українською та англійською мовами інтерфейсу для зручності користування.
У мобільному застосунку для платформи Android користувачі матимуть змогу:
 − реєструватися та авторизуватися, використовуючи ідентифікаційне ім'я та пароль для доступу до свого профілю;
 − переглядати каталог одягу, що включає широкий вибір товарів із зазначенням детальної інформації про кожен продукту;
 − оновлювати особисті дані у своєму обліковому записі, для отримання персоналізованих рекомендацій;
 − сканувати RFID-мітки в магазинах за допомогою портативних сканерів, які мають консультанти, для ідентифікації та отримання рекомендацій згідно з їхніми розмірами одягу.
Для адміністраторів через веб-інтерфейс буде доступно:
 − додавання нового одягу до системи, оновлення інформації про наявні товари, видалення застарілих позицій та редагування даних про товари;
 − реєстрація нових користувачів, управління їхніми обліковими записами, та перегляд списку всіх користувачів з можливістю доступу до детальної інформації про кожного;
 − зміна мови інтерфейсу між українською та англійською для забезпечення комфортного користування системою різними користувачами.

  3.2. Рамки наступних випусків

У веб-застосунку користувачі будуть мати можливість:
 − переглядати оновлений каталог одягу з детальною інформацією про продукти, включаючи доступні розміри та нові колекції;
 − оновлювати персональну інформацію та переваги в стилі через
 управління обліковим записом для отримання точних персоналізованих рекомендацій;
 MF-9: Можливість дистанційного керування системою через мобільний додаток або веб-інтерфейс
  Користувачі матимуть можливість здійснювати дистанційне керування системою поливу та освітлення через зручний мобільний додаток або веб-інтерфейс.
 MF-10: Техпідтримка користувачів для вирішення технічних питань та надання порад та рекомендацій щодо використання системи
  Користувачі можуть звертатися за технічною підтримкою через мобільний додаток або веб-інтерфейс, отримуючи відповіді на технічні запитання, поради та рекомендації щодо використання системи.
 MF-11: Інтеграція з іншими службами
  Система буде інтегрована з іншими онлайн-сервісами та платформами для забезпечення більш широких можливостей(як приклад замовлення через додаток “Нова Пошта”).

  3.3. Обмеження та винятки

Обмеження та винятки:
 -Залежність від доступу до електроенергії: Система моніторингу та автоматичного поливу може потребувати постійного джерела електроенергії для свого безперебійного функціонування. У випадку відсутності електроенергії, деякі функції системи можуть бути обмежені або недоступні.
 -Система персоналізованого вибору та покупки одягу буде доступною та оптимізованою лише для користувачів з України, що обмежує її використання в інших країнах.
 -Користувачі з інших операційних систем, таких як iOS, не зможуть встановити або використовувати мобільний додаток.
 -Для реєстрації, авторизації, перегляду каталогу одягу, замовлення та інших онлайн-операцій необхідне стабільне інтернет-з'єднання. Відсутність інтернету обмежить функціональність системи.
 -Портативні RFID-сканери, які використовуються консультантами в магазинах, працюють на операційних системах Windows або Linux, що вимагає відповідної сумісності обладнання.
 -Можливість замовлення одягу та оплати через мобільний додаток може бути обмежена для деяких товарів або під час проведення технічних робіт на сервері.
 -Співпраця з певними службами транспортировки може бути обмежена географічно або вимагати додаткових угод про співпрацю, що може вплинути на швидкість та доступність транспортировки товарів.
 -Неполадки в роботі RFID-сканерів або міток можуть призвести до затримок або помилок у ідентифікації користувачів та обробці даних про розміри одягу.

  4. БІЗНЕС-КОНТЕКСТ
  4.1. Профілі зацікавлених сторін

**Table**: Профілі зацікавлених сторін проекту
Зацікавлена сторона Основне значення Основні інтереси Обмеження  
Керівник
(Представники магазину) Зручний та ефективний інструмент для управління магазином Простота використання, можливість ефективного ведення обліку товарів та замовлень Обмежені знання технічних аспектів, потребують інтуїтивного інтерфейсу  
Користувач (Клієнти магазину) Зручне та безпечне замовлення товарів онлайн Простота та швидкість замовлення, безпека особистих даних Безпека особистих даних, швидкість обробки замовлень

  4.2. Пріоритети проекту

**Table**: Пріоритети проекту
Вимір Мета Обмеження Ступінь свободи  
Розклад приблизно до
27.06.2024 1 розробник 50-70% функцій з високим пріоритетом повинні бути включені в реліз 1.0  
Функції приблизно до 27.06.2024 Мобільний та Веб застосунок 60-80% функцій до першого релізу  
Якість Задовольнити критерії до продукту Проведення тестів 95-98% до першого релізу

  4.3. Робоче середовище

Даний продукт передбачає розробку та використання системи для персоналізованого вибору та покупки одягу, що включає мобільний додаток для кінцевих користувачів та веб-інтерфейс для адміністрування.
Робоче середовище для розробки: 
 -Клієнтська частина розробляється для мобільних пристроїв з операційною системою Android.
Для розробки мобільного додатку використовується мова програмування Java. Для розробки використовується платформа Android Studio.
- Адміністративне середовище забезпечується через веб-інтерфейс, що розміщується на сайті та дозволяє адміністраторам управляти каталогом товарів, користувацькими профілями, переглядати замовлення та здійснювати інші дії, пов'язані з адмініструванням системи. Розробка на мові програмування PHP за допомогою Visual Studio Code.
 - База даних для зберігання інформації про користувачів, продукти, замовлення та інші дані реалізована за допомогою MySQL. -XAMPP використовується як локальний сервер для розробки та тестування веб-додатка на локальному пристрої.

  5. СЕРВЕРНАЯ ЧАСТИНА ПРОДУКТУ
  5.1. База даних

 У ході роботи було розроблено базу даних з використанням реляційної СУБД MySQL.
 MySQL є широко використовуваною системою керування базами даних з відкритим початковим кодом. Функції цієї системи дозволяють виконувати деякий код безпосередньо на сервері бази даних. 
MySQL підтримує різні мови програмування для написання функцій і процедур, зокрема:
 – SQL: MySQL підтримує стандартну мову SQL для виконання запитів, створення таблиць, модифікації даних та управління базою даних.
 – PHP: MySQL та PHP часто використовуються разом для розробки веб-додатків. PHP може взаємодіяти з базою даних MySQL, виконувати запити і обробляти результати.
 – Java: MySQL має JDBC (Java Database Connectivity) драйвер, що дозволяє з'єднуватися з базою даних MySQL, виконувати SQL-запити та обробляти результати в Java.
 Для реалізації було створено наступні таблиці:
 – client: таблиця з даними про клієнтів;
 – client_profile: таблиця з профілями клієнтів;
 – clothing_items: таблиця з даними про одяг;
 – users: таблиця з даними про користувачів.

Графічне подання зв’язків між таблицями бази даних подано на рисунку 5.1.

Відношення між таблицями:
Клієнт може мати лише один профіль (відношення one-to-one між client і client_profile).
Клієнт може мати багато записів про одяг (відношення one-to-many між client і clothing_items).
Адміністратор може мати багато клієнтів (відношення one-to-many між users і client).
Адміністратор може додавати багато записів про одяг (відношення one-to-many між users і clothing_items).

  5.2. Backend

 Для написання серверної частини коду в проекті, що стосується ідентифікації розмірів одягу клієнтів, використовувалися такі технології та бібліотеки:
 – PHP: мова програмування, що часто використовується для розробки веб-додатків. PHP може взаємодіяти з базою даних MySQL, виконувати запити та обробляти результати.
 – MySQL: це система керування базами даних з відкритим початковим кодом. MySQL забезпечує високу продуктивність, надійність і легкість у використанні. Функції цієї системи дозволяють виконувати код безпосередньо на сервері бази даних.
 – Apache: це веб-сервер з відкритим кодом, який забезпечує надійність та гнучкість в розгортанні веб-додатків.
 – XAMPP: це програмний пакет, що включає в себе Apache сервер, MySQL базу даних, та інтерпретатори для скриптових мов PHP і Perl. XAMPP використовується для створення локальних веб-серверів.
 Для зв'язку з базою даних і визначення моделей у PHP використовується об'єктно-орієнтований підхід. Були розроблені класи, які представляють таблиці бази даних і забезпечують зручний інтерфейс для взаємодії з ними.
 Щодо шифрування паролів та створення токенів авторизації, завдяки PHP я використав вбудований засіб, функцію password_hash() для шифрування паролей. Приклад можна побачити на рисунку 2.1.

 Рисунок 5.1 – Приклад захешованого паролю

 На зображенні показано хеш паролю, збережений у базі даних. Хеш паролю складається з кількох частин:
– $2y$10$: це префікс, що вказує на використаний алгоритм хешування (bcrypt) та кількість ітерацій (cost factor).
– kDJEi2i3oErEfhOXuQlOyDeiSECB1E7xIMxgt86h8pJ,4…: це сам хешований пароль. Він включає в себе сіль (random salt) та хеш-значення паролю. Хешування паролів забезпечує безпеку, оскільки навіть у разі
несанкціонованого доступу до бази даних, зловмисники не зможуть дізнатися справжні паролі користувачів. Замість цього вони побачать тільки хешовані значення, які неможливо легко зворотно перетворити у вихідні паролі.

  5.3. Структура проекту

Проект було структуровано на три шари:
 1. Інтерфейс користувача – налаштування та запити, за допомогою яких користувач взаємодіє з API – контролери та маршрути.
 2. Логіка бізнес-процесів – обробка та управління даними.
 3. Рівень доступу до даних – робота з базою даних, міграції та забезпечення коректної взаємодії бази даних із сервером.

  5.4. Діаграми

 Розглянемо Deployment Diagram (діаграму розгортання), зображену на рисунку 5.2.
 Розглянемо Use Case діаграму, зображену на рисунку 2.3. Можна побачити, що на діаграмі представлені основні користувачі системи та їх взаємодія з різними функціональними можливостями системи.
 Діаграма активності відображає процес реєстрації нового клієнта в системі. Клієнт відкриває додаток, обирає мову, входить у систему та вводить свої дані. Система перевіряє правильність введених даних. У разі успішної верифікації дані зберігаються у базі, створюється профіль клієнта, а інформація про розмір одягу додається до профілю. Завершується процес відправкою повідомлення про успішну реєстрацію клієнту.

  5.5. Cпецифікація

 При написанні запитів було обрано архітектурний стиль REST.
 Основні принципи REST, які використовуються в проекті, включають REST (Representational State Transfer) використовується для створення ефективних та масштабованих API. REST забезпечує надійний обмін даними між клієнтом і сервером, що є критично важливим для роботи системи.
 Всі ресурси системи доступні через стандартизовані методи HTTP (GET, POST, PUT, DELETE). Це забезпечує прозорість та передбачуваність взаємодії між клієнтом і сервером. Наприклад, для отримання інформації про клієнта використовується метод GET, для створення нового клієнта ­POST, для оновлення даних клієнта -PUT, а для видалення клієнта ­DELETE. Детальніше про мії набір налаштувань REST у проекту можна подивитися у додатку А.

  6. ПРИСТРІЙ ІНТЕРНЕТ РЕЧЕЙ
  6.1. Обраний IOT застосунок

IOT застосунок це USB Reader для зчитування інформації з RFID-мітки.

  6.2. Процес роботи з IOT застосунком

Опис процесу роботи з RFID-читачем:
  1. Підключення читача: Читач підключається до комп'ютера через USB-порт. Після підключення на корпусі читача загоряється індикатор, який сигналізує про готовність пристрою до роботи.
  2. Підготовка RFID-мітки: RFID-мітка, яку потрібно прочитати, наближається до читача. Мітка містить унікальний ідентифікатор, який може бути прочитаний читачем.
   3. Читання інформації: Коли мітка знаходиться в зоні дії читача, читач активує мітку і читає інформацію з неї. Ця інформація потім передається через USB-порт на комп'ютер.
  4. Обробка інформації: Програмне забезпечення на комп'ютері приймає інформацію від читача і обробляє її. Це може включати перевірку ідентифікатора мітки, запис інформації в базу даних або виконання інших дій залежно від конкретного застосування.
  5. Відповідна дія: В результаті обробки інформації система виводить унікальний номер RFID-мітки.

  6.3. Програмне забезпечення та будова пристрою

 Для розробки програмного забезпечення для IoT пристрою використовується мова програмування Arduino (.ino). Пристрій складається з плати Arduino Uno, RFID-зчитувача RC522, зумера та двох світлодіодів (зеленого і червоного). Будова пристрою відображена на рисунку 6.1.

На зображенні показана схема підключення різних компонентів до плати Arduino Uno. Система включає в себе RFID-зчитувач RC522, зумер та два світлодіоди (зелений і червоний). Ця схема призначена для створення пристрою, який зчитує RFID-мітки і використовує світлодіоди та buzzer для сигналізації зчитування.

  6.4 Діаграми

 Розглянемо UML діаграму прецедентів, зображену на рисунку 6.2.
 Адміністратор може занести id пристрою до програмної системи, увімкнути та вимкнути пристрій, а також побачити його статус та дані. Давайте розглянемо UML діаграму взаємодії, яка зображена на рисунку 6.3.
 Процес взаємодії починається з під'єднання пристрою до комп'ютера. Після успішного підключення, пристрій входить в цикл, де він зчитує дані та відправляє їх на комп'ютер.
 Розглянемо UML діаграму діяльності, зображену на рисунку 6.4
 На цій діаграмі показано дії, що виконуються на пристрої, та дії, що виконуються на серверній частині.

  7. ВЕБ-ДОДАТОК
  7.1 Розробка системи

Система була розроблена відповідно до вказаних бізнес-вимог та концепції рішення.

  7.2 Архітектура та компоненти

  1. Веб-інтерфейс: забезпечує адміністрування системи, включаючи додавання нових товарів, реєстрацію нових користувачів, управління обліковими записами та зміну мови інтерфейсу. Розроблено на мові PHP з використанням середи розробки Visual Studio Code.
  2. Серверна частина: база даних була реалізовано за допомогою СУБД MySQL для зберігання інформації про користувачів, товари, замовлення та інші дані. XAMPP використовується для розробки та тестування веб-додатка на локальному пристрої.

7.3 Реалізований функції веб-додатка

Реалізовані функції базуються на наведених нижче бізнес-функціях:
 1. MF-5: Додавання та редагування одягу адміністраторами через веб-інтерфейс: Адміністратори можуть додавати нові товари до системи, оновлювати інформацію про наявнітовари, видаляти застарілі позиції та редагувати дані про товари.
 2. MF-6: Додавання нових клієнтів адміністраторами: Адміністратори можуть реєструвати нових користувачів, управляти їхніми обліковими записами та переглядати списки користувачів з доступом до детальної інформації про кожного.
 3. MF-7: Перегляд списку клієнтів: Адміністратори можуть переглядати список зареєстрованих клієнтів та їх деталі.
 4. MF-9: Зміна мови інтерфейсу: Адміністратори можуть змінювати мову інтерфейсу між українською та англійською для забезпечення комфортного користування системою різними користувачами.

7.4 Архітектура та діаграми

 Розробка системи представлена за допомогою діаграми пакетів яку можна побачити на рисунку 7.1.
 
 Ця схема представляє архітектуру веб-проекту, де центральне місце займає блок PHP, що включає три основні компоненти: Frontend, Backend та Blocks. Зовнішні модулі, такі як JavaScript та мовні налаштування (Languages), взаємодіють з блоком Blocks, забезпечуючи динамічну поведінку та багатомовність застосунку. Модуль завантажень (Uploads) взаємодіє з Backend, дозволяючи завантажувати та керувати файлами на сервері. Вся система знаходиться в контейнері Web, що об'єднує всі компоненти проекту.
 Розглянемо діаграму прецедентів, зображену на рисунку 7.2. Адміністратор може занести id пристрою до програмної системи, увімкнути та вимкнути пристрій, а також побачити його статус та дані.
 Давайте розглянемо UML діаграму взаємодії, яка зображена на рисунку 7. 3.
 На даній діаграмі прецедентів показана взаємодія різних користувачів із системою, що складається з мобільного додатка, IoT-компонента та веб-інтерфейсу.
 Також була розроблена діаграма взаємодії для візуалізації взаємодії між різними частинами системи та їх процесу яка зображена на рисунках 7.4-7.7. Так як вона велика я розділю її на частини.
 Рисунок 7.4 ілюструє процеси реєстрації та авторизації користувачів у веб-додатку. Для реєстрації користувач вводить свої дані, які перевіряються на правильність та унікальність. Якщо дані валідні і користувач ще не зареєстрований, система зберігає їх у базі даних та перенаправляє на головну сторінку.
 Процес авторизації включає ведення облікових даних користувачем, перевірку правильності запиту та даних, а також перевірку наявності користувача в базі даних. Якщо дані валідні, користувач успішно авторизується і перенаправляється на іншу сторінку.
 Схема на рисунку 7.5 представляє процеси, пов'язані з головною сторінкою та навігацією в системі управління.Процес починається з перевірки ролі користувача на головній сторінці (index.php). Якщо користувач є адміном або супер-адміном, відбувається перенаправлення на відповідні сторінки адміністрування.

 Дві схеми на малюнку 7.6 показують процеси додавання одягу та клієнтів у системі управління.
  1. Додавання одягу: 
   Процес починається з перевірки ролі користувача на сторінці додавання одягу (addItemForm.php). Якщо користувач не авторизований, його перенаправляють на сторінку авторизації (logInForm). Після успішної авторизації перевіряється роль користувача. Якщо користувач є адміном, його перенаправляють на сторінку адміністрування (indexAdmin.php). Якщо користувач має іншу роль, дані перевіряються та додаються до бази даних. У випадку успішного додавання, користувача перенаправляють на іншу сторінку.
  2. Додавання клієнта:
   Процес аналогічний додаванню одягу. Починається з перевірки ролі користувача на сторінці додавання клієнта (registerClientForm.php). Неавторизовані користувачі перенаправляються на сторінку авторизації (logInForm). Після успішної авторизації перевіряється роль користувача. Якщо користувач є адміном, його перенаправляють на сторінку адміністрування (indexAdmin.php). Якщо користувач має іншу роль, дані перевіряються та додаються до бази даних. У випадку успішного додавання, користувача перенаправляють на іншу сторінку.

 Дві схеми на малюнку 7.7 показують процеси редагування та видалення одягу в системі управління.
  1. Змінення одягу:
   Процес починається з перевірки ролі адміністратора на сторінці редагування одягу (editForm.php). Якщо користувач має права адміністратора, він може змінити одяг за допомогою форми (edit.php). Після внесення змін перевіряється, чи були вони успішно збережені. Якщо зміни успішні, користувач перенаправляється на головну сторінку (index.php). У випадку помилки користувачу показується повідомлення про помилку, і процес повертається на етап редагування.
  2. Видалення одягу:
   Процес починається аналогічно: перевіряється роль адміністратора на сторінці видалення одягу (editForm.php). Якщо користувач має права адміністратора, він може видалити одяг за допомогою форми (delete.php). Після видалення перевіряється, чи було воно успішним. Якщо видалення успішне, користувач перенаправляється на головну сторінку (index.php). У випадку помилки користувачу показується повідомлення про помилку, і процес повертається на етап видалення.

  8. МОБІЛЬНИЙ ДОДАТОК
  8.1. Розробка системи

 Мобільний застосунок розроблено як частина комплексної системи, що включає кілька компонентів, таких як програма для Arduino для роботи з RFID, веб-інтерфейс та мобільний додаток на Java. Для даної лабораторної роботи розглядається тільки мобільна частина системи.
 Архітектура та компоненти:
 1. Мобільний додаток: Розроблено для платформи Android з використанням мови програмування Java та середовища розробки Android Studio.
 2. Серверна частина: Використовується для обробки запитів від мобільного додатка, взаємодії з базою даних та надання відповіді у вигляді JSON об'єктів.

  8.2. Реалізований функції веб-додатка

 Реалізовані функції базуються на наведених нижче бізнес-функціях:
  1. MF-1: Реєстрація та авторизація користувачів в мобільному застосунку.
  2. MF-2: Каталог одягу в мобільному застосунку.
  3. MF-3: Управління обліковим записом користувача.

  8.3. Архітектура та діаграми

 Розробка системи представлена за допомогою діаграми пакетів яку можна побачити на рисунку 8.1.
 Архітектура мобільного додатка включає кілька ключових компонентів. Головна папка проекту називається "App", в якій зберігаються всі файли та папки проекту. Усередині папки "App" знаходяться декілька підпапок. Папка "java" містить папку "com.example.market", в якій зберігаються файли з розширенням ".java", що відповідають за логіку додатка. Папка "res" містить різні ресурси проекту, такі як файли для стилізації, макети сторінок, шрифти та текстові ресурси. Зокрема, в підпапці "drawble" зберігаються файли для стилізації та іконки проекту, в підпапці "layout" зберігаються файли, що визначають форми та відображення сторінок, у підпапці "font" містяться файли для стилізації шрифтів, а в підпапці "values" зберігаються текстові ресурси та кольорова гама проекту.
 Розглянемо діаграму прецедентів, зображену на рисунку 8.2.
 На даній діаграмі прецедентів показана взаємодія різних користувачів із системою, що складається з мобільного додатка, IoT-компонента та веб-інтерфейсу.
 Давайте розглянемо UML діаграму взаємодії, яка зображена на рисунку 8.3.
 На цій діаграмі компонентів зображена структура мобільного
 додатка, показуючи взаємодію між різними частинами системи та відповідні файли, що відповідають за реалізацію кожної функції.
 Компонент Authorization Client включає файли logIn.php, Login.java, activity_sign_up.xml і відповідає за процес авторизації користувача.
 Компонент Register Client включає файли signUp.php, SignUp.java, activity_sign_up.xml і відповідає за процес реєстрації нового користувача.
 Компонент Home включає файли clientInfo.php, MainActivity.java, activity_main.xml і є головним екраном додатка, який відображається після успішної авторизації користувача.
 Компонент Logout Client включає файли logOut.php, MainActivity.java, activity_main.xml і відповідає за процес виходу користувача з системи.
 Компонент Info Client включає файли clientInfo.php, MainActivity.java,
 activity_sign_up.xml і відображає інформацію про клієнта.
 Компонент Proﬁle включає файли proﬁle.php, Proﬁle.java, activity_proﬁle.xml і є екраном профілю користувача, який відображає детальну інформацію про користувача.
 Компонент List Item включає файл list.php і є веб-компонентом, що відображає список елементів.
 Давайте розглянемо ER модель даних, яка зображена на рисунку 8.4.
 На даній ER-діаграмі показана структура бази даних, що використовується для зберігання інформації про користувачів, їх профілі, товари та адміністраторів у системі.
 Висновок
 У ході виконання курсової роботи було розроблено програмну систему для ідентифікації розмірів одягу клієнтів. Система включає декілька компонентів, серед яких мобільний додаток, веб-інтерфейс та IoT пристрій з використанням RFID-технологій. Основною метою розробки було створення інструменту, який дозволяє автоматизувати процес підбору одягу для клієнтів, забезпечуючи високу точність та зручність користування.

 Перелік джерел посилання

1. Матеріали лекцій з дисципліни «Архітектура програмного забезпечення».
2.Бондарєв В.М. Програмування на PHP і MySQL для початківців [Текст] / Дж. Уолтерс. Київ: Центр навчальної літератури, 2010. -300 с.
3.Документація до програмних засобів: PHP, MySQL, Java, Arduino [Електронний ресурс] – Режим доступу до ресурсу: https://www.php.net/manual/en/,
https://dev.mysql.com/doc/, https://docs.oracle.com/javase/8/docs/, https://www.arduino.cc/en/Guide/ArduinoUno
4.Android Studio. Офіційна документація [Електронний ресурс] – Режим доступу до ресурсу: https://developer.android.com/studio
– 07.06.2024 р.
5.Шилдт Г. Програмування на Java [Текст] / Герберт Шилдт. -Харків: Фоліо, 2015. -1024 с.
6.Комплекс навчально-методичного забезпечення навчальної дисципліни "Бази даних" [Електронний ресурс] "Програмна інженерія"; О. О. Мазурова, М. С. Широкопетлєва. – Харків, 2017. – 276 с.
7.Мартін Р. Чистий код: Створення, аналіз і рефакторинг [Текст] / Роберт Мартін. Київ: Діалектика, 2010. -464 с.
8.Фаулер М. Рефакторинг: покращення існуючого коду [Текст] / Мартін Фаулер. Київ: Діалектика, 2019. -448 с.

ДОДАТОК А

**Table**: REST
-специфікація
Назва Метод Шлях Тіло  
Login POST /logIn.php { "email": "string", "password": "string" }  
Logout POST /logOut.php {}  
Register POST /register.php { "full_name": "string", "email": "string", "password": "string" }  
Add Item POST /addItem.php { "item_name": "string", "description": "string", "price": "number", "image": "file" }  
Update Item POST /update.php { "item_id": "int", "item_name": "string", "description": "string", "price": "number", "image": "file" }  
Delete Item POST /delete.php { "item_id": "int" }  
List Clients GET /listClient.php {}  
Register Client POST /registerClient.p hp { "client_name": "string", "client_email": "string", "password": "string" }  
Edit Client POST /editForm.php { "client_id": "int", "client_name": "string", "client_email": "string", "password": "string" }
